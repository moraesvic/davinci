#!/bin/bash

print_header="$(dirname "$0")/header_creator/long_header"
$print_header

dependencies=("node" "psql")
for arg in ${dependencies[@]} ; do
	if [ -z $(which "$arg") ] ; then
		echo "You have unmet dependencies. Please install $arg before proceding with database installation."
		exit 1
	fi
done

# The following line is everything that must be changed when deploying in the future.
database="davinci"

uname="${database}_admin"
passwd="$(pwgen -s 10 1)"
host="127.0.0.1"
port=5432

environment_file="../.env"

# If file and has not zero size
if [ -s "$environment_file" ] ; then
	>&2 echo "It seems like the environment file was already configured. If you would like to start from a fresh installation, please run ./uninstall first"
	exit 1
fi

cat << EOF
To run this script, you will need to log in as a super user in PostgreSQL server. \
Usually, this corresponds to Unix ''postgres'' account. \
If you are in the sudoers group, it will suffice to type in your account password below.
EOF

sudo -i -u postgres bash << EOF || exit 1
psql -c "CREATE USER $uname WITH ENCRYPTED PASSWORD '$passwd'; " \
-c "CREATE DATABASE $database; " \
-c "GRANT ALL PRIVILEGES ON DATABASE $database TO $uname; "
EOF

echo -e "\nStarting database...\n"

cat << EOF
If everything ran successfully, you can now log in to psql with the command:

    psql -h $host -p $port -d $database -U $uname

Then type in the password: ''$passwd''.
EOF

cat > "$environment_file" << EOF 
POSTGRES_USER=$uname
POSTGRES_PASSWORD=$passwd
POSTGRES_HOST=$host
POSTGRES_DATABASE=$database
POSTGRES_PORT=$port
EOF

cat << EOF
New credentials were saved to file ''$environment_file'', \
the file on project root holding environment variables.
EOF

echo -e "\n\nWe will now populate the created database $db"

for sql_file in *.sql ; do
    echo "Reading file $sql_file ..."
    PGPASSWORD="$passwd" psql -U "$uname" -h "$host" -d "$database" \
        -p "$port" -f "$sql_file"
done
